{"ast":null,"code":"import auth0 from \"auth0-js\";\nimport decodeJWT from \"jwt-decode\";\nexport default class Auth {\n  constructor(history) {\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          this.history.push(\"/courses\");\n        } else if (err) {\n          this.history.push(\"/\");\n          alert(\"Error: \".concat(err.error, \". Check the console for further details\"));\n          console.log(err);\n        }\n      });\n    };\n\n    this.setSession = authResult => {\n      const expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem(\"access_token\", authResult.accessToken);\n      localStorage.setItem(\"id_token\", authResult.idToken);\n      localStorage.setItem(\"expires_at\", expiresAt);\n    };\n\n    this.logout = () => {\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"id_token\");\n      localStorage.removeItem(\"expires_at\");\n      this.userProfile = null;\n      this.auth0.logout({\n        clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n        returnTo: \"http://localhost:3000\"\n      });\n    };\n\n    this.getAccessToken = () => {\n      const accessToken = localStorage.getItem(\"access_token\");\n\n      if (!accessToken) {\n        throw new Error(\"No access token found.\");\n      }\n\n      return accessToken;\n    };\n\n    this.isAdmin = () => {\n      const decoded = decodeJWT(this.getAccessToken());\n\n      if ('http://localhost:3000/roles' in decoded && decoded['http://localhost:3000/roles'][0] === 'admin') {\n        return decoded;\n      }\n    };\n\n    this.getProfile = cb => {\n      if (this.userProfile) return cb(this.userProfile);\n      this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\n        if (profile) this.userProfile = profile;\n        cb(profile, err);\n      });\n    };\n\n    this.history = history;\n    this.userProfile = null;\n    this.auth0 = new auth0.WebAuth({\n      domain: process.env.REACT_APP_AUTH0_DOMAIN,\n      clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n      redirectUri: process.env.REACT_APP_AUTH0_CALLBACK_URL,\n      audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n      responseType: \"token id_token\",\n      scope: \"openid profile email\"\n    });\n  }\n\n  isAuthenticated() {\n    const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\n    return new Date().getTime() < expiresAt;\n  }\n\n}","map":{"version":3,"sources":["G:\\MERN (Final Version)\\MERN (Final Version)\\react-client\\src\\authentication\\Auth.js"],"names":["auth0","decodeJWT","Auth","constructor","history","login","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","push","alert","error","console","log","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","logout","removeItem","userProfile","clientID","process","env","REACT_APP_AUTH0_CLIENT_ID","returnTo","getAccessToken","getItem","Error","isAdmin","decoded","getProfile","cb","client","userInfo","profile","WebAuth","domain","REACT_APP_AUTH0_DOMAIN","redirectUri","REACT_APP_AUTH0_CALLBACK_URL","audience","REACT_APP_AUTH0_AUDIENCE","responseType","scope","isAuthenticated","parse"],"mappings":"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","sourcesContent":["import auth0 from \"auth0-js\";\nimport decodeJWT from \"jwt-decode\";\n\nexport default class Auth {\n    constructor(history) {\n        this.history = history;\n        this.userProfile = null;\n        this.auth0 = new auth0.WebAuth({\n            domain: process.env.REACT_APP_AUTH0_DOMAIN,\n            clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n            redirectUri: process.env.REACT_APP_AUTH0_CALLBACK_URL,\n            audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n            responseType: \"token id_token\",\n            scope: \"openid profile email\"\n        });\n    }\n    login = () => {\n        this.auth0.authorize();\n    };\n    handleAuthentication = () => {\n        this.auth0.parseHash((err, authResult) => {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n                this.setSession(authResult);\n                this.history.push(\"/courses\");   \n            } else if (err) {\n                this.history.push(\"/\");\n                alert(`Error: ${err.error}. Check the console for further details`);\n                console.log(err);\n            }\n        });\n    };\n    setSession = (authResult) => {\n        const expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n        localStorage.setItem(\"access_token\", authResult.accessToken);\n        localStorage.setItem(\"id_token\", authResult.idToken);\n        localStorage.setItem(\"expires_at\", expiresAt);\n    }\n    isAuthenticated() {\n        const expiresAt = JSON.parse(localStorage.getItem(\"expires_at\"));\n        return new Date().getTime() < expiresAt;\n    }\n    logout = () => {\n        localStorage.removeItem(\"access_token\");\n        localStorage.removeItem(\"id_token\");\n        localStorage.removeItem(\"expires_at\");\n        this.userProfile = null;\n        this.auth0.logout({\n            clientID: process.env.REACT_APP_AUTH0_CLIENT_ID,\n            returnTo: \"http://localhost:3000\"\n        });\n    }\n    getAccessToken = () => {\n        const accessToken = localStorage.getItem(\"access_token\");\n        if (!accessToken) {\n            throw new Error(\"No access token found.\");\n        }\n        return accessToken;\n    }\n    isAdmin = () => {\n        const decoded = decodeJWT(this.getAccessToken());\n        if ('http://localhost:3000/roles' in decoded && decoded['http://localhost:3000/roles'][0] === 'admin') {\n            return decoded;\n        }\n    }\n    getProfile = (cb) => {\n        if (this.userProfile) return cb(this.userProfile);\n        this.auth0.client.userInfo(this.getAccessToken(), (err, profile) => {\n            if (profile) this.userProfile = profile;\n            cb(profile, err);\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}